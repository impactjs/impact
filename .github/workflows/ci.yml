on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  install:
    name: install dependencies
    runs-on: ubuntu-latest
    env:
      node-modules-cache-name: node-modules
      node-version: 21
      pnmp-version: 9.0.6
      bun-version: 1.1.36
    outputs:
      node-version: ${{ env.node-version }}
      pnmp-version: ${{ env.pnmp-version }}
      bun-version: ${{ env.bun-version }}
      nm-cache-key: ${{ steps.create-cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.pnmp-version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
      - run: pnpm install --frozen-lockfile
      - id: create-cache-key
        run: echo "key=node-modules-${{runner.os}}-${{env.node-modules-cache-name}}-${{hashFiles('**/pnpm-lock.yaml')}}-${{github.run_id}}-${{github.run_attempt}}" >> $GITHUB_OUTPUT
      - uses: actions/cache/save@v4
        id: cache-node-modules
        with:
          path: |
            **/node_modules
          key: ${{ steps.create-cache-key.outputs.key }}

  lint:
    name: lint and format check
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ needs.install.outputs.nm-cache-key }}
      - run: pnpm install --frozen-lockfile
      - run: pnpm run check
      - run: pnpm run sort-check
      - run: pnpm run format-check
  
  build:
    name: build artifacts
    needs: [install, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [darwin, linux]
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ needs.install.outputs.bun-version }}
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ needs.install.outputs.nm-cache-key }}
      - run: pnpm moonx build cli --target="bun-${{ matrix.platform }}-${{ matrix.arch }}" --outfile bin/${{ matrix.platform }}-${{ matrix.arch }}
      - uses: actions/upload-artifact@v4
        with:
          path: packages/cli/bin
          name: ${{ matrix.platform }}-${{ matrix.arch }}

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [install, build]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ needs.install.outputs.nm-cache-key }}
      - uses: actions/download-artifact@v4
        with:
          path: packages/cli/bin
      - name: authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: publish prerelease
        run: pnpm moonx prepuplish --tag="pr-${{ github.event.number }}"
        if: github.event_name == 'pull_request'
      - name: publish
        run: pnpm moonx publish
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
