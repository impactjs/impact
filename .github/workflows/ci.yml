name: ci
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  install:
    name: install dependencies
    runs-on: ubuntu-latest
    env:
      node-modules-cache-name: node-modules
      moon-cache-name: moon-cache
      node-version: 21
      pnmp-version: 9.0.6
      bun-version: 1.1.36
    outputs:
      node-version: ${{ env.node-version }}
      pnmp-version: ${{ env.pnmp-version }}
      bun-version: ${{ env.bun-version }}
      nm-cache-key: ${{ steps.create-cache-key.outputs.key }}
      moon-cache-key: ${{ steps.create-cache-key-moon.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.pnmp-version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
      - id: create-cache-key-moon
        run: echo "key=moon-${{ env.moon-cache-name }}-${{ github.ref }}-${{ github.run_id }}-${{ github.run_attempt}}" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: |
            .moon/cache
          key: ${{ steps.create-cache-key-moon.outputs.key }}-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            moon-${{ env.moon-cache-name }}-${{ github.ref }}-${{ github.run_id }}-
            moon-${{ env.moon-cache-name }}-${{ github.ref }}-
            moon-${{ env.moon-cache-name }}-
            moon-
      - run: pnpm install --frozen-lockfile
      - id: create-cache-key
        run: echo "key=node-modules-${{runner.os}}-${{env.node-modules-cache-name}}-${{hashFiles('**/pnpm-lock.yaml')}}-${{github.run_id}}-${{github.run_attempt}}" >> $GITHUB_OUTPUT
      - uses: actions/cache/save@v4
        id: cache-node-modules
        with:
          path: |
                node_modules
                */*/node_modules
                plugins/*/*/node_modules
          key: ${{ steps.create-cache-key.outputs.key }}

  lint:
    name: lint and format check
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: actions/cache/@v4
        with:
          path: |
            .moon/cache
          key: ${{ needs.install.outputs.moon-cache-key }}-lint-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            ${{ needs.install.outputs.moon-cache-key }}-lint-${{ github.run_id }}-
            ${{ needs.install.outputs.moon-cache-key }}-lint-
            ${{ needs.install.outputs.moon-cache-key }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
            plugins/*/*/node_modules
          key: ${{ needs.install.outputs.nm-cache-key }}
      - run: pnpm install --frozen-lockfile
      - run: pnpm moon :sort-check :format-check :check :lint

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [install, lint]
    outputs:
      impacts-cli-version: ${{ steps.expose-cli-version.outputs.impacts-cli-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ needs.install.outputs.bun-version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.install.outputs.node-version }}
          registry-url: 'https://registry.npmjs.org/'
          scope: '@impacts'
      - uses: actions/cache/restore@v4
        with:
          path: |
            .moon/cache
          key: ${{ needs.install.outputs.moon-cache-key }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
            plugins/*/*/node_modules
          key: ${{ needs.install.outputs.nm-cache-key }}
      - run: pnpm install --frozen-lockfile # ensure all dependencies are installed and make sure to run `prepare` scripts
      - name: authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: publish prerelease
        run: pnpm moonx prepublish -- --tag="pr-${{ github.event.number }}"
        if: github.event_name == 'pull_request'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: publish
        run: pnpm moonx publish
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - id: expose-cli-version
        run: echo "impacts-cli-version=$(jq -r '.version' packages/cli/package.json)" >> $GITHUB_OUTPUT

  create-release-artifacts:
    name: create release artifacts
    needs: [install, lint, deploy]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [darwin, linux]
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ needs.install.outputs.bun-version }}
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
            plugins/*/*/node_modules
          key: ${{ needs.install.outputs.nm-cache-key }}
      - run: pnpm moonx build cli -- --target="bun-${{ matrix.platform }}-${{ matrix.arch }}" --outfile bin/${{ matrix.platform }}-${{ matrix.arch }}
        env:
          IMPACTS_CLI_VERSION: ${{ needs.deploy.outputs.impacts-cli-version }}
      - uses: actions/upload-artifact@v4
        with:
          path: packages/cli/bin
          name: ${{ matrix.platform }}-${{ matrix.arch }}

  create-release:
    name: publish release
    needs: [install, lint, deploy, create-release-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.install.outputs.pnmp-version }}
      - uses: actions/download-artifact@v4
        with:
          path: packages/cli/bin
      - id: gh-prerelease
        if: github.event_name == 'pull_request'
        run: |
          version=$(pnpm show @impacts/cli@pr-${{ github.event.number }} version)
          echo "version: $version"
          rm packages/cli/bin/*/impact
          ls packages/cli/bin/*/*
          gh release create "cli@v$version" packages/cli/bin/*/* --title "cli pr-${{ github.event.number }}" --latest=false --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: gh-release
        if: github.event_name == 'push'
        run: |
          version=$(pnpm show @impacts/cli@latest version)
          echo "version: $version"
          rm packages/cli/bin/*/impact
          ls packages/cli/bin/*/*
          gh release create "cli@v$version" packages/cli/bin/*/* --title "cli v$version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
